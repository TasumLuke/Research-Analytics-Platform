name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node environment
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Cache npm (optional but speeds up builds)
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      # Step 4: Install project dependencies
      - name: Install dependencies
        run: |
          npm install
          # Add ESLint + dependencies if missing
          npm install --save-dev eslint@latest typescript-eslint @eslint/js eslint-plugin-react globals

      # Step 5: Verify ESLint configuration
      - name: Verify ESLint config
        run: |
          if [ ! -f eslint.config.js ]; then
            echo "No eslint.config.js found — creating default ESLint v9 flat config..."
            cat <<'EOF' > eslint.config.js
            import js from "@eslint/js";
            import globals from "globals";
            import reactPlugin from "eslint-plugin-react";
            import tseslint from "typescript-eslint";

            export default [
              js.configs.recommended,
              ...tseslint.configs.recommended,
              {
                files: ["**/*.{ts,tsx,js,jsx}"],
                languageOptions: {
                  ecmaVersion: "latest",
                  globals: globals.browser,
                  parserOptions: { ecmaFeatures: { jsx: true } },
                },
                plugins: { react: reactPlugin },
                rules: {
                  "react/react-in-jsx-scope": "off",
                  "no-unused-vars": "warn",
                  "semi": ["warn", "always"],
                  "quotes": ["warn", "double"]
                },
                settings: { react: { version: "detect" } },
              },
            ];
            EOF
          fi

      # Step 6: Lint
      - name: Run ESLint
        run: npm run lint

      # Step 7: Run tests
      - name: Run tests
        run: npm test --silent || echo "No tests found — skipping."

      # Step 8: Build
      - name: Build the app
        run: npm run build

      # Step 9: Upload build artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist
            build

      # Optional Step 10: Python environment (if backend or analysis tools)
      - name: Check for requirements.txt
        id: reqcheck
        run: |
          if [ -f requirements.txt ]; then echo "exists=true" >> $GITHUB_OUTPUT; else echo "exists=false" >> $GITHUB_OUTPUT; fi

      - name: Setup Python
        if: steps.reqcheck.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        if: steps.reqcheck.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Python dependencies
        if: steps.reqcheck.outputs.exists == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Python smoke test
        if: steps.reqcheck.outputs.exists == 'true'
        run: |
          python -c "import pandas as pd; print('pandas', pd.__version__)"
