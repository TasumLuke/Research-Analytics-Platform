name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Cache npm packages
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          npm install
          npm install --save-dev eslint@latest typescript-eslint @eslint/js eslint-plugin-react globals

      # Step 5: Create ESLint config if missing
      - name: Verify ESLint config
        shell: bash
        run: |
          if [ ! -f eslint.config.js ]; then
            echo "No eslint.config.js found, creating default ESLint v9 flat config..."
            cat > eslint.config.js <<'EOF'
import js from "@eslint/js";
import globals from "globals";
import reactPlugin from "eslint-plugin-react";
import tseslint from "typescript-eslint";

export default [
  js.configs.recommended,
  ...tseslint.configs.recommended,
  {
    files: ["**/*.{ts,tsx,js,jsx}"],
    languageOptions: {
      ecmaVersion: "latest",
      globals: globals.browser,
      parserOptions: { ecmaFeatures: { jsx: true } },
    },
    plugins: { react: reactPlugin },
    rules: {
      "react/react-in-jsx-scope": "off",
      "no-unused-vars": "warn",
      "semi": ["warn", "always"],
      "quotes": ["warn", "double"]
    },
    settings: { react: { version: "detect" } },
  },
];
EOF
          fi

      # Step 6: Lint
      - name: Run ESLint
        run: npm run lint || echo "Lint warnings found so continuing."

      # Step 7: Run tests (if any)
      - name: Run tests
        run: npm test --silent || echo "No tests found, hence skipping."

      # Step 8: Build
      - name: Build the app
        run: npm run build

      # Step 9: Upload build artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist
            build

      # Step 10: Check for Python requirements
      - name: Check for requirements.txt
        id: reqcheck
        run: |
          if [ -f requirements.txt ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Step 11: Setup Python if needed
      - name: Setup Python
        if: steps.reqcheck.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 12: Cache pip
      - name: Cache pip
        if: steps.reqcheck.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Step 13: Install Python deps
      - name: Install Python dependencies
        if: steps.reqcheck.outputs.exists == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      # Step 14: Python smoke test
      - name: Python smoke test
        if: steps.reqcheck.outputs.exists == 'true'
        run: |
          python -c "import pandas as pd; print('pandas', pd.__version__)"
